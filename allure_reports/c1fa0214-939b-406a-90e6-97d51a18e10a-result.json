{"name": "Submit customer feedback with no body and receive an error", "status": "failed", "statusDetails": {"message": "AssertionError: 'EOF' is not one of ['Invalid rate', 'User action is required']", "trace": "self = <tools.schema_validator.SchemaValidator object at 0x10ad28a20>, schema_name = 'feedback_400.json', actual_json = {'errors': ['EOF', 'EOF'], 'status': 'error'}\n\n    @allure.step('Validating actual response body against the schema {schema_name}')\n    def validate_json(self, schema_name, actual_json):\n        schema = os.path.join(self.__schema_path, schema_name)\n        try:\n>           validate(actual_json, self.read_to_json(schema))\n\ntools/schema_validator.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninstance = {'errors': ['EOF', 'EOF'], 'status': 'error'}\nschema = {'$id': 'http://localhost/root.json', 'properties': {'errors': {'$id': '#/properties/errors', 'items': {'$id': '#/prop...$id': '#/properties/status', 'enum': ['error'], 'type': 'string'}}, 'required': ['errors', 'status'], 'type': 'object'}\ncls = <class 'jsonschema.validators.create.<locals>.Validator'>, args = (), kwargs = {}, validator = <jsonschema.validators.create.<locals>.Validator object at 0x10adb6e80>\nerror = <ValidationError: \"'EOF' is not one of ['Invalid rate', 'User action is required']\">\n\n    def validate(instance, schema, cls=None, *args, **kwargs):\n        \"\"\"\n        Validate an instance under the given schema.\n    \n            >>> validate([2, 3, 4], {\"maxItems\": 2})\n            Traceback (most recent call last):\n                ...\n            ValidationError: [2, 3, 4] is too long\n    \n        :func:`validate` will first verify that the provided schema is itself\n        valid, since not doing so can lead to less obvious error messages and fail\n        in less obvious or consistent ways.\n    \n        If you know you have a valid schema already, especially if you\n        intend to validate multiple instances with the same schema, you\n        likely would prefer using the `IValidator.validate` method directly\n        on a specific validator (e.g. ``Draft7Validator.validate``).\n    \n    \n        Arguments:\n    \n            instance:\n    \n                The instance to validate\n    \n            schema:\n    \n                The schema to validate with\n    \n            cls (IValidator):\n    \n                The class that will be used to validate the instance.\n    \n        If the ``cls`` argument is not provided, two things will happen in\n        accordance with the specification. First, if the schema has a\n        :validator:`$schema` property containing a known meta-schema [#]_ then the\n        proper validator will be used.  The specification recommends that all\n        schemas contain :validator:`$schema` properties for this reason. If no\n        :validator:`$schema` property is found, the default validator class is\n        the latest released draft.\n    \n        Any other provided positional and keyword arguments will be passed on when\n        instantiating the ``cls``.\n    \n        Raises:\n    \n            `jsonschema.exceptions.ValidationError` if the instance\n                is invalid\n    \n            `jsonschema.exceptions.SchemaError` if the schema itself\n                is invalid\n    \n        .. rubric:: Footnotes\n        .. [#] known by a validator registered with\n            `jsonschema.validators.validates`\n        \"\"\"\n        if cls is None:\n            cls = validator_for(schema)\n    \n        cls.check_schema(schema)\n        validator = cls(schema, *args, **kwargs)\n        error = exceptions.best_match(validator.iter_errors(instance))\n        if error is not None:\n>           raise error\nE           jsonschema.exceptions.ValidationError: 'EOF' is not one of ['Invalid rate', 'User action is required']\nE           \nE           Failed validating 'enum' in schema['properties']['errors']['items']:\nE               {'$id': '#/properties/errors/items',\nE                'enum': ['Invalid rate', 'User action is required'],\nE                'type': 'string'}\nE           \nE           On instance['errors'][0]:\nE               'EOF'\n\nvenv/lib/python3.7/site-packages/jsonschema/validators.py:899: ValidationError\n\nDuring handling of the above exception, another exception occurred:\n\napp = <application.Application object at 0x10ad52da0>\n\n    @allure.feature('Customer Feedback')\n    @allure.title('Submit customer feedback with no body and receive an error')\n    @pytest.mark.negative\n    def test_when_submitting_feedback_without_body_should_receive_error(app):\n        app.nps_request.send_feedback()\n        app.nps_request.validate_status(expected_code=400)\n>       app.schema_validator.validate_json('feedback_400.json', app.nps_request.response_body)\n\ntests/api/nps_test.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tools.schema_validator.SchemaValidator object at 0x10ad28a20>, schema_name = 'feedback_400.json', actual_json = {'errors': ['EOF', 'EOF'], 'status': 'error'}\n\n    @allure.step('Validating actual response body against the schema {schema_name}')\n    def validate_json(self, schema_name, actual_json):\n        schema = os.path.join(self.__schema_path, schema_name)\n        try:\n            validate(actual_json, self.read_to_json(schema))\n        except exceptions.ValidationError as err:\n            message = err.args[0]\n>           raise AssertionError(f'{message}')\nE           AssertionError: 'EOF' is not one of ['Invalid rate', 'User action is required']\n\ntools/schema_validator.py:31: AssertionError"}, "steps": [{"name": "Sending user feedback", "status": "passed", "attachments": [{"name": "Response body", "source": "38efd652-679d-4c20-88ce-bb2da8ecdf59-attachment.attach"}], "parameters": [{"name": "payload", "value": "None"}], "start": 1567000087316, "stop": 1567000087321}, {"name": "Validating response status code; expected - 400", "status": "passed", "parameters": [{"name": "expected_code", "value": "400"}], "start": 1567000087321, "stop": 1567000087322}, {"name": "Validating actual response body against the schema 'feedback_400.json'", "status": "failed", "statusDetails": {"message": "AssertionError: 'EOF' is not one of ['Invalid rate', 'User action is required']\n", "trace": "  File \"/Users/akovalevych/Projects/imhio-task/venv/lib/python3.7/site-packages/allure_commons/_allure.py\", line 157, in impl\n    return func(*a, **kw)\n  File \"/Users/akovalevych/Projects/imhio-task/tools/schema_validator.py\", line 31, in validate_json\n    raise AssertionError(f'{message}')\n"}, "parameters": [{"name": "schema_name", "value": "'feedback_400.json'"}, {"name": "actual_json", "value": "{'errors': ['EOF', 'EOF'], 'status': 'error'}"}], "start": 1567000087322, "stop": 1567000087323}], "attachments": [{"name": "stdout", "source": "59248d05-44ea-4e69-89b4-24ac8bc3825b-attachment.txt", "type": "text/plain"}], "start": 1567000087316, "stop": 1567000087325, "uuid": "373856bd-fcfc-4ec8-90e2-4586cb84cece", "historyId": "aefed9be09600034a47c63471809a27c", "testCaseId": "0948b6ce2f0eaf7ce2d5366eff46bb99", "fullName": "tests.api.nps_test#test_when_submitting_feedback_without_body_should_receive_error", "labels": [{"name": "feature", "value": "Customer Feedback"}, {"name": "tag", "value": "API"}, {"name": "tag", "value": "negative"}, {"name": "parentSuite", "value": "tests.api"}, {"name": "suite", "value": "nps_test"}, {"name": "subSuite"}, {"name": "host", "value": "Alesias-MacBook-Pro.local"}, {"name": "thread", "value": "11700-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.api.nps_test"}]}